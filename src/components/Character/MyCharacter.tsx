/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.15 public/models/myCharacter.glb -o src/components/Character/Character.tsx -r public 
*/

import React, { useEffect, useRef, useState } from 'react';
import { useAnimations, useFBX, useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { AnimationAction } from 'three';

type MyCharacterProps = JSX.IntrinsicElements['group'] & {
  section: number;
  animation: string;
};

export function MyCharacter(props: MyCharacterProps) {
  const character = useRef();

  const { scene, animations }: GLTF = useGLTF('/models/myCharacter.glb');

  const { actions } = useAnimations(animations, character);

  useEffect(() => {
    const wavingAnimation: AnimationAction = actions[
      props.animation
    ] as AnimationAction;
    wavingAnimation.reset().fadeIn(0.7)?.play();

    return () => {
      actions[props.animation]?.fadeOut(0.7);
    };
  }, [actions, animations, props.animation]);

  return (
    <group
      {...props}
      dispose={null}
      position={[0, 0.2, 0]}
      rotation-y={Math.PI / 1.5}
    >
      <primitive object={scene} ref={character} />
    </group>
  );
}

useGLTF.preload('/models/myCharacter.glb');
